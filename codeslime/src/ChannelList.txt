import React, { useState, useEffect, useCallback } from "react";
import axios from "axios";
import Channel from "./Channel";
import "./channellist.css";

// A component that renders a list of channels
function ChannelList(props) {
    const [channels, setChannels] = useState([]); // The state for the channels
    const [newChannel, setNewChannel] = useState(""); // The state for the input field for creating a new channel
    const [selectedChannel, setSelectedChannel] = useState(null); // The state for the selected channel
    const [error, setError] = useState(null); // The state for the error message
    const [isLoading, setIsLoading] = useState(false); // The state for the loading indicator

    // A function that fetches the channels from the server
    function getChannels() {
        axios
        .get("http://localhost:5000/channels")
        .then((response) => {
            setChannels(response.data);
            console.log(response.data);
        })
        .catch((error) => {
            console.error(error);
            setError('An error occurred while fetching the channels.');
        });
    }

    // A function that posts a new channel to the server
    function postChannel() {
        // Check if the new channel name is empty
        if (!newChannel.trim()) {
            setError('Channel name cannot be empty.');
            return;
        }

        axios
        .post("http://localhost:5000/channels", {
            name: newChannel,
        })
        .then((response) => {
            getChannels(); // Refresh the channels after posting
            setNewChannel(""); // Clear the input field
            setError(null); // Clear the error
        })
        .catch((error) => {
            console.error(error);
            setError('An error occurred while creating the channel.');
        });
    }

    // A function that handles the change of the input field for creating a new channel
    const handleNewChannelChange = useCallback((event) => {
        setNewChannel(event.target.value);
    }, []);

    // A function that handles the click of a channel in the list
    const handleChannelClick = useCallback((channel) => {
        if (selectedChannel && selectedChannel.id === channel.id) {
            setSelectedChannel(null); // Deselect the channel if it's already selected
        } else {
            setSelectedChannel(channel); // Select the channel if it's not already selected
        }
    }, [selectedChannel]);
    

    // A useEffect hook that runs once when the component mounts and fetches the channels from the server
    useEffect(() => {
        getChannels();
    }, []);

    return (
        <div className="channel-list">
        <h1>Channel-Based Tool for Programming Issues</h1>
        <div className="channels">
            <h3>Channels</h3>
            <ul>
            {channels.map((channel) => (
                <li
                key={channel.id}
                className={
                    selectedChannel && selectedChannel.id === channel.id
                    ? "selected"
                    : ""
                }
                onClick={() => handleChannelClick(channel)}
                >
                {channel.name}
                </li>
            ))}
            </ul>
            <div className="new-channel">
            <input
                type="text"
                value={newChannel}
                onChange={handleNewChannelChange}
                placeholder="Type a new channel name here"
            />
            <button onClick={postChannel}>Create</button>
            </div>
        </div>
        {selectedChannel && <Channel channel={selectedChannel} />}
        {isLoading && <p className="loading">Loading...</p>}
        {error && <p className="error">{error}</p>}
        </div>
    );
}

export default ChannelList;

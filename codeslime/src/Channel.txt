import React, { useState, useEffect } from "react";
import axios from "axios";
import MessageList from "./MessageList";
import MessageForm from "./MessageForm";

function Channel({ channel }) {
    const [messages, setMessages] = useState([]); // The state for the messages in the channel
    const [newMessage, setNewMessage] = useState(""); // The state for the input field for posting a new message
    const [replyTo, setReplyTo] = useState(null); // The state for the id of the message being replied to

    // A function that fetches the messages for the channel from the server
    function getMessages() {
        axios
        .get(`http://localhost:5000/messages/${channel.id}`)
        .then((response) => {
            setMessages(response.data);
        })
        .catch((error) => {
            console.error(error);
        });
    }

    // A function that posts a new message to the server
    function postMessage() {
        if (newMessage.trim() === '') {
            alert('Message cannot be empty');
            return;
        }

        axios
        .post("http://localhost:5000/messages", {
            channel_id: channel.id,
            author: 'Doctor do good',
            content: newMessage,
            reply_to: replyTo
        })
        .then((response) => {
            getMessages(); // Refresh the messages after posting
            setNewMessage(""); // Clear the input field
        })
        .catch((error) => {
            console.error(error);

            // Check if the error response exists
        if (error.response) {
            // The request was made and the server responded with a status code
            // that falls out of the range of 2xx
            console.log(error.response.data);
            console.log(error.response.status);
            console.log(error.response.headers);
        } else if (error.request) {
            // The request was made but no response was received
            // `error.request` is an instance of XMLHttpRequest in the browser and an instance of
            // http.ClientRequest in Node.js
            console.log(error.request);
        } else {
            // Something happened in setting up the request that triggered an Error
            console.log('Error', error.message);
        }
        console.log(error.config);
        });
    }
    // Define the onReplyClick function in the Channel component
    function onReplyClick(messageId) {
    // Set the replyTo state with the ID of the message that is being replied to
    setReplyTo(messageId);
    }

    // Pass the onReplyClick function as a prop to the MessageList
    <MessageList messages={messages} onReplyClick={onReplyClick} />


    // A function that handles the change of the input field for posting a new message
    function handleNewMessageChange(event) {
        setNewMessage(event.target.value);
    }

    // A useEffect hook that runs once when the component mounts and fetches the messages for the channel
    useEffect(() => {
        getMessages();
    }, [channel]);

    return (
        // In your Channel component
        <div className="channel">
            <h2>{channel.name}</h2>
            <div className="messages">
            {messages.map((message) => (
        <div key={message.id}>
            <p>{message.content}</p>
            <button onClick={() => setReplyTo(message.id)}>Reply</button>
            {message.replies && message.replies.map((reply) => (
                <div key={reply.id} style={{ marginLeft: '20px' }}>
                    <p>{reply.content}</p>
                    <button onClick={() => setReplyTo(reply.id)}>Reply</button>
                </div>
            ))}
        </div>
    ))}

            </div>
            <MessageForm
                newMessage={newMessage}
                onNewMessageChange={handleNewMessageChange}
                onNewMessageSubmit={postMessage}
            />
        </div>

    );
}

export default Channel;